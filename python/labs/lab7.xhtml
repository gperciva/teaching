<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
         "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<title>Lab 7: Filtering</title>
<link rel="stylesheet" href="../eeip1.css" />
</head>
<body>

<a href="../index.html">Back to main</a>

<h1>Lab 7: Building Filters</h1>

<div class="center">
Exercises:

<ul style="list-style-type:none;">
<li>
17. Filtering with pole and zero placement in the <i>z</i>-plane.
</li><li>
18. Filtering to a specification.
</li>
</ul>
</div>


<br style="clear:both"/>
<h2>Exercise 17: </h2>

<div class="left">
<h3>Background</h3>

<p>
Filters change the statistics of a signal.
</p>

<p>
In engineering, we usually assume systems are linear.
We go to great lenths to linearise the response of electronic
systems, and non-linear systems are still very much
regarded as "specialist" compared with LTI (Linear, Time-Invariant)
ones. Usually, when we refer to a filter, we mean a device which
changes the spectral characteristics of a presented signal.
</p>

<p>
This lab falls into two parts: designing and implementing a filter
directly by placing poles and zeros on the <i>z</i>-plane, and then
converting a classical, continuous-time design such as the
maximally-flat Butterworth or maximally-steep Tchebychev filters
to operate as a sampled system.
</p>

<p>
First of all, though, we'll need some tools to measure the response
of the systems we build. This can be done in the <em>frequency</em>
domain by taking the Fourier Tranform of filtered white noise,
or in the <em>time</em> domain by passing a varying-frequency
sine-wave ("chirp") through the filter and seeing how its amplitude
changes as the freqency sweeps across the frequency range of interest.
</p>

</div>

<div class="right">
<h3>Maths homework</h3>

<p>
Look at the coefficients from the <a href="lab6.html#ex16homework">Exercise 16
Maths Homework</a>
</p>

<p>
Write down the transfer function for this system in the form
</p>
<math title="{:(z-z_1)(z-z_2)...(z-z_n):}/{:(z-p_1)(z-p_2)...(z-p_n) "
      xmlns="http://www.w3.org/1998/Math/MathML"
      style="padding-left:5em;">
  <mstyle mathcolor="black" fontfamily="serif" displaystyle="true">
    <mfrac>
      <mrow>
        <mrow>
          <mo>(</mo>
          <mi>z</mi>
          <mo>-</mo>
          <msub>
            <mi>z</mi>
            <mn>1</mn>
          </msub>
          <mo>)</mo>
        </mrow>
        <mrow>
          <mo>(</mo>
          <mi>z</mi>
          <mo>-</mo>
          <msub>
            <mi>z</mi>
            <mn>2</mn>
          </msub>
          <mo>)</mo>
        </mrow>
        <mo>...</mo>
        <mrow>
          <mo>(</mo>
          <mi>z</mi>
          <mo>-</mo>
          <msub>
            <mi>z</mi>
            <mi>n</mi>
          </msub>
          <mo>)</mo>
        </mrow>
      </mrow>
      <mrow>
        <mrow>
          <mo>(</mo>
          <mi>z</mi>
          <mo>-</mo>
          <msub>
            <mi>p</mi>
            <mn>1</mn>
          </msub>
          <mo>)</mo>
        </mrow>
        <mrow>
          <mo>(</mo>
          <mi>z</mi>
          <mo>-</mo>
          <msub>
            <mi>p</mi>
            <mn>2</mn>
          </msub>
          <mo>)</mo>
        </mrow>
        <mo>...</mo>
        <mrow>
          <mo>(</mo>
          <mi>z</mi>
          <mo>-</mo>
          <msub>

            <mi>p</mi>

            <mi>n</mi>
          </msub>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mfrac>
  </mstyle>
</math>
<p>
Expand this out to obtain the numerator and denominator as
polynomials in <i>z</i><sup>-1</sup>, resulting in this form:
</p>
<math title="G{:1+a_1z^{:-1:}+a_2z^{:-2:}:}/{:1+b_1z^{:-1:}+b_2z^{:-2:}:} "
      xmlns="http://www.w3.org/1998/Math/MathML"
      style="padding-left:5em;">
  <mstyle mathcolor="black" fontfamily="serif" displaystyle="true">
    <mi>G</mi>
    <mfrac>
      <mrow>
        <mn>1</mn>
        <mo>+</mo>
        <msub>
          <mi>a</mi>
          <mn>1</mn>
        </msub>
        <msup>
          <mi>z</mi>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </msup>
        <mo>+</mo>
        <msub>
          <mi>a</mi>
          <mn>2</mn>
        </msub>
        <msup>
          <mi>z</mi>
          <mrow>
            <mo>-</mo>
            <mn>2</mn>
          </mrow>
        </msup>
      </mrow>
      <mrow>
        <mn>1</mn>
        <mo>+</mo>
        <msub>
          <mi>b</mi>
          <mn>1</mn>
        </msub>
        <msup>
          <mi>z</mi>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </msup>
        <mo>+</mo>
        <msub>
          <mi>b</mi>
          <mn>2</mn>
        </msub>
        <msup>
          <mi>z</mi>
          <mrow>
            <mo>-</mo>
            <mn>2</mn>
          </mrow>
        </msup>
      </mrow>
    </mfrac>
  </mstyle>
</math>
<p>
This can be implemented using a <em>second order</em>,
<em>bi-quadratic</em> section like this:
</p>
<object data="biquad.svg" type="image/svg+xml"
        style="padding-left:10mm;
               width:70mm; height:50mm">
</object>
<p>
On paper, write out the values for a second-order filter, at the
output of each delay and the output of the entire filter.
</p>

</div>

<br style="clear:both"/>

<div class="task">
<h3>Your task...</h3>

<p>
There are a few sub-tasks.  Do them in order, and it would be good
to get them checked by Nick or Graham at each step.
</p>

<ul>
<li>
Noise generation: filters aren't so fascinating on a sine wave, so
make a class that generates white noise.  This is like your
sine-wave oscillator classes, but instead of returning an array of
the next 2048 samples of a sine wave, you return 2048 samples of
random values.
<br/>
<br/>
for fun: after doing white noise, make some other colors of noise,
like pink, brown, grey, blue, violet, orange, or black noise.
(<a href="http://en.wikipedia.org/wiki/Colors_of_noise">wikipedia:
colros of noise</a>)
</li><li>
write a Delay class.  This class will contain a
<code>process(audio_buffer)</code> function, which will output the
input shifted by N samples.  N should be passed in via the
constructor.  You will need an internal buffer of size N to store
values between each function call.
</li><li>
write a Filter class.  For now, you may hard-code the filter
coefficients in the <code>__init__()</code> function (i.e. you do
not need to pass them as arguments).
<br/><br/>
coefficients will be given out in class.
</li>
</ul>

<h4>... show your work to a demonstrator</h4>
</div>


<br style="clear:both"/>
<h2>Exercise 13: </h2>

<div class="left">
<h3>Background</h3>

<p>
</p>

</div>

<div class="right">
<h3>Maths homework</h3>

<p>
</p>

<ul>
<li>

</li><li>
</li>
</ul>

</div>

<br style="clear:both"/>

<div class="task">
<h3>Your task...</h3>

<p>
</p>

<ul>
<li>
</li><li>
</li>
</ul>

<h4>... show your work to a demonstrator</h4>
</div>





<p><a href="../index.html">Back to main</a></p>

<!-- footer -->
<br style="clear:both"/>

<p>
  <a rel="license"
     href="http://creativecommons.org/licenses/by-sa/2.5/scotland/">
  <img
     alt="Creative Commons License" style="border-width:0"
     src="http://i.creativecommons.org/l/by-sa/2.5/scotland/88x31.png"
  />
  </a>
  Unless otherwise noted, all materials on these pages
  are licenced under a
  <a rel="license"
     href="http://creativecommons.org/licenses/by-sa/2.5/scotland/">
  Creative
  Commons Licence
  </a>.
</p>


</body>
</html>
